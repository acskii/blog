[{"title":"Welcome!","date":"17/4/2025","tags":["welcome","first"],"author":"acskii","id":1744893487484,"content":"**Hey there curious traveler!** \r\nThis is the first blog post that will be uploaded on my personal blog website.\r\n\r\nNow I know you might be wondering, what does this mean _to you?_ \r\n\r\nLet me clarify, this website has been built mostly for my sake...\r\n\r\nI am planning to contain all the resources that I deem useful or _potentially_ helpful in an organized manner. Hopefully, the future me will thank my infinite wisdom!!\r\n\r\nAnyway, as of now, the sole content I will be mainly uploading are related to **Data Structures and Algorithms**, curated by [NeetCode.io][1].\r\n\r\nProbably a string of posts, each detailing explanation resources, personal understanding and written code.\r\n\r\nNow for some seemingly obvious information: **how to use this site?**\r\n\r\n## Navigation\r\n\r\nAs you can see, there at the top of this page is the **navigation bar**. It contains a current total of **4** buttons:\r\n- Home page button,\r\n- Posts page button,\r\n- About page button,\r\n- Dark/light mode button.\r\n> **Notice**: As of 17/4/2025, the **About** is currently under construction.\r\n\r\nOf course you came here from the Home page.\r\n\r\nYou are currently on the Posts page (obviously), clicking on the leftmost title will redirect you to my [**GitHub**][2] page, as also the rightmost bottom logo in the footer.\r\n\r\nThe Theme button on the top right of the screen, will alternate between **Light Mode** and **Dark Mode**. Choose freely.\r\n\r\n## Posts\r\n\r\nEach post contains information about:\r\n- Author (mostly me),\r\n- Post Title,\r\n- Upload/Update dates,\r\n- *Tags*\r\n\r\n**Tags** are a sole way to categorize the posts, which should help in locating a specific post that you may want to come back to.\r\nUse the search field to type the specific tag, and **click on the search icon**.\r\n\r\nAn incomplete tag will **not** yield results expected.\r\n\r\n## Issues\r\n\r\nCurrently, I am certain that the website interface is working properly on computes/laptop devices, on mobile phones however, there seems to be an issue in UI sizes. \r\nObviously this will be fixed and this inconvenience will be resolved.\r\n\r\nAlso, the posts content **only** currently supports **dark mode**, I will look into fixing this as well. \r\n\r\n## Contact\r\n[GitHub][2] // [Email][3]\r\n\r\nWelcome to my stash, young wanderer! :)\r\nNow off you go..\r\n\r\n[1]: https://www.neetcode.io\r\n[2]: https://www.github.com/acskii\r\n[3]: mailto:andrew.sameh.adel@gmail.com"},{"title":"(1) Contains Duplicates","author":"acskii","tags":["neetcode","java","easy"],"date":"18/4/2025","id":1744997860072,"content":"**Hey!**\r\n\r\nThis is the first ever post on this series of [NeetCode 150][1].\r\nThe style of these will be as follows:\r\n- Problem + Examples\r\n- Explanation of how *I* understood the problem and solved it\r\n- Code solution in **mostly Java** and **Python**\r\n- Other resources e.g. Video explanations\r\n\r\nNow without further ado, here is the first problem!\r\n\r\n....\r\n\r\n...\r\n\r\n..\r\n\r\n.\r\n\r\n\r\n## 217. Contains Duplicate\r\n  **Difficulty**: *Easy*\r\n\r\n**Description**: Given an integer array `nums`, return `true` if any value appears **more than once** in the array, otherwise return `false`.\r\n\r\n**Example 1:**\r\n```java\r\nInput: nums = [1, 2, 3, 3]\r\n\r\nOutput: true\r\n```\r\n\r\n**Example 2:**\r\n```java\r\nInput: nums = [1, 2, 3, 4]\r\n\r\nOutput: false\r\n```\r\n\r\n....\r\n\r\n...\r\n\r\n..\r\n\r\n.\r\n\r\n### Approach\r\nThere are 2 approaches that I managed to figure out: **Brute Force** and **HashSet**.\r\n\r\n#### 1] Brute Force\r\nUsing the brute force method, in essence, is iterating through all the numbers within the given input array and comparing each element with all the other elements in the array. This can be achieved by iterating **twice** through the array for each of its elements.\r\n\r\n**Time Complexity**: **O(n^2)**\r\n\r\n**Space Complexity**: **O(1)**\r\n\r\n```java\r\n// Brute Force Approach\r\nclass Solution {\r\n    public boolean hasDuplicate(int[] nums) {\r\n        for (int i = 0; i < nums.length; i++) {\r\n\t      // Loop once for each element\r\n            for (int j = 0; j < nums.length; j++) {\r\n            // For each element, loop through the array again\r\n                if (nums[i] == nums[j] && i != j) {\r\n                // If two numbers compared are the same\r\n                // AND not in the same index (same element)\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n#### 2] HashSet\r\nThis method utilizes a property in the *HashSet* class, where you can in linear time check whether a number is already within a particular set.\r\n\r\nTo use this method, we will iterate through the array **once**, adding each element in the set if not present, and any element found to be already in the set indicates that it is a duplicate.\r\n\r\n**Time Complexity**: **O(n)**\r\n\r\n**Space Complexity**: **O(n)**\r\n\r\n```java\r\n// HashSet approach\r\nclass Solution {\r\n    public boolean hasDuplicate(int[] nums) {\r\n        // initialize an empty set\r\n        Set<Integer> passed = new HashSet<>();\r\n        for (int num: nums) {\r\n            if (passed.contains(num)) {\r\n                // Stop looping if an element is in the set\r\n                return true;\r\n            }\r\n            // Add element into the set\r\n            passed.add(num);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n#### Bonus\r\nNow, using **Java**, there is another way to implement the HashSet approach with *less lines of code*.\r\n\r\n**Time Complexity**: **O(n)**\r\n\r\n**Space Complexity**: **O(n)**\r\n\r\n```java\r\nclass Solution {\r\n    public boolean hasDuplicate(int[] nums) {\r\n        return Arrays.stream(nums).distinct().count() < nums.length;\r\n    }\r\n}\r\n```\r\n\r\nThis create an Array stream that allows for the `distinct` method that filters any duplicate elements. Checking whether the length of the newly returned Array is the same as the original will determine if any element got filtered as a duplicate or not.\r\n\r\n### Resources\r\n\r\nCheck out [this video][2] explaining the problem.\r\n\r\n....\r\n\r\n...\r\n\r\n..\r\n\r\n.\r\n\r\n\r\nNow thus concludes the first problem in the series...\r\n\r\nDon't think for a second that I only solved this problem, and decided to create an entire blog just for it, **NO**!\r\n\r\nI have already solved a lot more, and still am. And this is a way for me to revise on previously used approaches and solutions as I continue in this journey.\r\n\r\nAnyway, thanks for reading till the end, future me.\r\n\r\nSee you in the next problem!\r\n**:)**\r\n\r\n[1]: https://www.neetcode.io/roadmap\r\n[2]: https://www.youtube.com/watch?v=3OamzN90kPg"}]